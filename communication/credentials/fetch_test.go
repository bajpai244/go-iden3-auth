package credentials

import (
	"github.com/iden3/go-circuits"
	"github.com/iden3/go-iden3-auth/types"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestVerifyCredentialFetchRequest(t *testing.T) {

	var message types.CredentialFetchRequest
	message.Type = CredentialFetchRequestMessageType
	message.Data = types.CredentialFetchRequestMessageData{}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpProof.ProofData = &types.ProofData{
		A: []string{
			"18936271973117240691705559585769592974936923569213179030272017872877809039923",
			"18422345941126925346404589344471685526481812474926428421192486541362664918772",
			"1"},
		B: [][]string{
			{
				"21330507917605771112737495332384182754017872671331663255035774134477307177657",
				"11462448334617588029347704885403867272225695665465848309095217964693916030466",
			},
			{
				"6840720762741964372185603768831031763412571244452731103935719626324813065968",
				"21706573949504402596589372160652940106962129670251783730794239678073827564253",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"17548802242159422756497011319050257549779839182737330954154562317224853077096",
			"16720285840459139191823107762843332365012723866736056448880671648502165007589",
			"1",
		},
	}
	zkpProof.PubSignals = []string{
		"360506537017543098982364518145035624387547643177965411252793105868750389248",
		"12345",
		"12051733342209181702880711377819237050140862582923079913097401558944144010618",
	}
	message.Data.Scope = []interface{}{zkpProof}

	err := VerifyCredentialFetchRequest(&message)
	assert.Nil(t, err)
}

func TestExtractDataFromCredentialFetchRequest(t *testing.T) {

	var message types.CredentialFetchRequest
	message.Type = CredentialFetchRequestMessageType
	message.Data = types.CredentialFetchRequestMessageData{ClaimID: "992fc184-c902-4f9a-af62-b383cc5e1eb4", Schema: "KYCAgeCredential"}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpProof.ProofData = &types.ProofData{
		A: []string{
			"18936271973117240691705559585769592974936923569213179030272017872877809039923",
			"18422345941126925346404589344471685526481812474926428421192486541362664918772",
			"1"},
		B: [][]string{
			{
				"21330507917605771112737495332384182754017872671331663255035774134477307177657",
				"11462448334617588029347704885403867272225695665465848309095217964693916030466",
			},
			{
				"6840720762741964372185603768831031763412571244452731103935719626324813065968",
				"21706573949504402596589372160652940106962129670251783730794239678073827564253",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"17548802242159422756497011319050257549779839182737330954154562317224853077096",
			"16720285840459139191823107762843332365012723866736056448880671648502165007589",
			"1",
		},
	}
	zkpProof.PubSignals = []string{
		"360506537017543098982364518145035624387547643177965411252793105868750389248",
		"12345",
		"12051733342209181702880711377819237050140862582923079913097401558944144010618",
	}
	message.Data.Scope = []interface{}{zkpProof}

	token, err := ExtractMetadataFromCredentialFetchRequest(&message)
	assert.Nil(t, err)
	assert.Equal(t, "12345", token.Challenge)
	assert.Equal(t, "992fc184-c902-4f9a-af62-b383cc5e1eb4", token.ClaimID)
	assert.Equal(t, "KYCAgeCredential", token.ClaimSchema)

}
