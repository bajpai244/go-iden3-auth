package auth

import (
	"context"
	"fmt"
	"github.com/iden3/go-iden3-auth/communication/packer"
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-iden3-auth/types"
	"github.com/stretchr/testify/assert"
)

func TestCreateAuthorizationRequest(t *testing.T) {

	aud := "1125GJqgw6YEsKFwj63GY87MMxPL9kwDKxPUiwMLNZ"
	zkpProofRequest := types.ZeroKnowledgeProofRequest{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AtomicQueryMTPCircuitID,
		Rules: map[string]interface{}{
			"challenge": 12345678,
			"audience":  aud,
			"allowedIssuers": []string{
				"115zTGHKvFeFLPu3vF9Wx2gBqnxGnzvTpmkHPM2LCe",
				"115zTGHKvFeFLPu3vF9Wx2gBqnxGnzvTpmkHPM2LCe",
			},
		},
	}

	request := CreateAuthorizationRequest(10, aud, "https://test.com/callback")

	request.WithZeroKnowledgeProofRequest(zkpProofRequest)

	assert.Equal(t, 2, len(request.Data.Scope))
}
func TestVerifyMessageWithAuthProof(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpProof.ProofData = &types.ProofData{
		A: []string{
			"6807142976568489254129987481389970790048870221943660648833750801722749769662",
			"13811182779758948993435669124001052501939669904238445458453308627013829993881",
			"1",
		},
		B: [][]string{
			{
				"1100658387420856656999617260396587549490320987275888589013664343574809180330",
				"6271619554100652532302412650545865559102683218896584596952129504406572338279",
			},
			{
				"14732910796480272245291363689840710264816417845998668210234805961967222411399",
				"697511497805383174761860295477525070010524578030535203059896030784240207952",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"3322888400314063147927477851922827359406772099015587732727269650428166130415",
			"11791447421105500417246293414158106577578665220990150855390594651727173683574",
			"1",
		},
	}
	zkpProof.PubSignals = []string{
		"1",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"379949150130214723420589610911161895495647789006649785264738141299135414272",
	}
	message.Data.Scope = []interface{}{zkpProof}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "18656147546666944484453899241916469544090258810192803949522794490493271005313", token.State)
	assert.Equal(t, "119tqceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ", token.ID)

	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0xa36786C3E18225da7cc8FC69c6443ecD41827FF5")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

	msg, err := (&packer.PlainMessagePacker{}).Pack("application/json", &message)
	fmt.Println(string(msg))
}
func TestVerifyMessageWithAuthAndAtomicProofMTP(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpAuth := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpAuth.ProofData = &types.ProofData{
		A: []string{
			"6807142976568489254129987481389970790048870221943660648833750801722749769662",
			"13811182779758948993435669124001052501939669904238445458453308627013829993881",
			"1",
		},
		B: [][]string{
			{
				"1100658387420856656999617260396587549490320987275888589013664343574809180330",
				"6271619554100652532302412650545865559102683218896584596952129504406572338279",
			},
			{
				"14732910796480272245291363689840710264816417845998668210234805961967222411399",
				"697511497805383174761860295477525070010524578030535203059896030784240207952",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"3322888400314063147927477851922827359406772099015587732727269650428166130415",
			"11791447421105500417246293414158106577578665220990150855390594651727173683574",
			"1",
		},
	}
	zkpAuth.PubSignals = []string{
		"1",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"379949150130214723420589610911161895495647789006649785264738141299135414272",
	}
	zkpAtomic := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AtomicQueryMTPCircuitID,
	}

	zkpAtomic.ProofData = &types.ProofData{
		A: []string{
			"14563891483923817735351071227705334357482245819917832755440492751795326413295",
			"20001980078286652597494447537480393118263491043298930761329275311111441096085",
			"1",
		},
		B: [][]string{
			{
				"21460159041971667208875402098144855602171917038488503689296027024135429671707",
				"9175445768113769703996084712672842329219702292512170837734652428035591323144",
			},
			{
				"10903477940480645465545606090437044024923801481176394282103911000841141137655",
				"8424415251889807111172788947141884111799125271291264519130017760779659719833",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"13152557649540629470947504987414571133512125556520386893434586449071845933586",
			"10523070098476215003191956451600442017991123271856887288630451951750613360903",
			"1",
		},
	}
	zkpAtomic.PubSignals = []string{
		"379949150130214723420589610911161895495647789006649785264738141299135414272",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"1",
		"18605292738057394742004097311192572049290380262377486632479765119429313092475",
		"26599707002460144379092755370384635496563807452878989192352627271768342528",
		"1642074362",
		"180410020913331409885634153623124536270",
		"2",
		"0",
		"10",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
	}
	message.Data.Scope = []interface{}{zkpAuth, zkpAtomic}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "18656147546666944484453899241916469544090258810192803949522794490493271005313", token.State)
	assert.Equal(t, "119tqceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ", token.ID)
	//
	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0xa36786C3E18225da7cc8FC69c6443ecD41827FF5")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

}
func TestVerifyMessageWithAuthAndAtomicProofSig(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpAuth := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpAuth.ProofData = &types.ProofData{
		A: []string{
			"6807142976568489254129987481389970790048870221943660648833750801722749769662",
			"13811182779758948993435669124001052501939669904238445458453308627013829993881",
			"1",
		},
		B: [][]string{
			{
				"1100658387420856656999617260396587549490320987275888589013664343574809180330",
				"6271619554100652532302412650545865559102683218896584596952129504406572338279",
			},
			{
				"14732910796480272245291363689840710264816417845998668210234805961967222411399",
				"697511497805383174761860295477525070010524578030535203059896030784240207952",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"3322888400314063147927477851922827359406772099015587732727269650428166130415",
			"11791447421105500417246293414158106577578665220990150855390594651727173683574",
			"1",
		},
	}
	zkpAuth.PubSignals = []string{
		"1",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"379949150130214723420589610911161895495647789006649785264738141299135414272",
	}
	zkpAtomicSig := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AtomicQuerySigCircuitID,
	}

	zkpAtomicSig.ProofData = &types.ProofData{
		A: []string{
			"1488456198277173867661803167279729032792624154299809535479139810450208085804",
			"9811034571283288656264374082369091089294184381655818490061981465520280644099",
			"1",
		},
		B: [][]string{
			{
				"13681354712371365579602068955518190907734292243300799145386142304285387190248",
				"19642020020503110008281046192437788751455352298111438354251429185186525636938",
			},
			{
				"18027737448042663605647662927822589790701241972444434677331650112736257064866",
				"18923462657673777837321044737582380572508740613132447083192792887982785512304",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"828611771379429881138968663246435638713557278809347995796848761749026576833",
			"15003422674439031650056257919485333677483689815727200225661349760606202441045",
			"1",
		},
	}
	zkpAtomicSig.PubSignals = []string{
		"6317996369756476782464660619835940615734517981889733696047139451453239145426",
		"379949150130214723420589610911161895495647789006649785264738141299135414272",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"1",
		"26599707002460144379092755370384635496563807452878989192352627271768342528",
		"6317996369756476782464660619835940615734517981889733696047139451453239145426",
		"18605292738057394742004097311192572049290380262377486632479765119429313092475",
		"1642074362",
		"180410020913331409885634153623124536270",
		"2",
		"0",
		"10",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
	}
	message.Data.Scope = []interface{}{zkpAuth, zkpAtomicSig}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "18656147546666944484453899241916469544090258810192803949522794490493271005313", token.State)
	assert.Equal(t, "119tqceWdRd2F6WnAyVuFQRFjK3WUXq2LorSPyG9LJ", token.ID)
	//
	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0xa36786C3E18225da7cc8FC69c6443ecD41827FF5")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

}
