package auth

import (
	"context"
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-iden3-auth/types"
	"github.com/stretchr/testify/assert"
)

func TestVerify(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.KycBySignaturesCircuitID,
	}

	zkpProof.ProofData = &types.ProofData{
		A: []string{"10441536817202584897377823144827964642356918402871315490038163167310235469676",
			"3188873104904010906845899057040012497857652125001996465924027367142766788060",
			"1"},
		B: [][]string{{"10259767950868305572343651918722890484304440255374794205464892311274784569874",
			"18113532891970083775734522192028652126404157383671158241782353379080674688210",
		}, {
			"20011188305329655231409527762393912898857036946232895893305954758470171745705",
			"19212224402431449690017436050830610655559646158634403540885275057516508525272",
		}, {
			"1",
			"0",
		}},
		C: []string{"17410066358263445906462947561105622363737416663317734129930901016400750644236",
			"10889346016675221860511647187111664354773325795907973404602900127856769668544",
			"1",
		},
	}
	zkpProof.PubSignals = []string{"12345", "372902514040400364441393275265861152892555341750332828757240276565437644800", "19443506635601976434000063402326775248489014592264899338419890539515181882284", "840", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "372902514040400364441393275265861152892555341750332828757240276565437644800", "19443506635601976434000063402326775248489014592264899338419890539515181882284", "2021", "4", "25"}
	message.Data.Scope = []interface{}{zkpProof}

	err := VerifyProofs(&message)
	assert.Nil(t, err)
}

func TestVerifyWrongMessage(t *testing.T) {

	var message types.AuthorizationMessageRequest
	message.Type = AuthorizationRequestMessageType
	message.Data = types.AuthorizationMessageRequestData{}

	zkpProofRequest := types.ZeroKnowledgeProofRequest{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.KycBySignaturesCircuitID,
		Rules:     map[string]interface{}{},
	}
	message.Data.Scope = []types.TypedScope{zkpProofRequest}

	err := VerifyProofs(&message)

	assert.NotNil(t, err)
}

func TestCreateAuthorizationRequest(t *testing.T) {

	aud := "1125GJqgw6YEsKFwj63GY87MMxPL9kwDKxPUiwMLNZ"
	zkpProofRequest := types.ZeroKnowledgeProofRequest{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.KycBySignaturesCircuitID,
		Rules: map[string]interface{}{
			"challenge":        12345678,
			"countryBlacklist": []int{840},
			"currentYear":      2021,
			"currentMonth":     9,
			"currentDay":       28,
			"minAge":           18,
			"audience":         aud,
			"allowedIssuers": []string{
				"115zTGHKvFeFLPu3vF9Wx2gBqnxGnzvTpmkHPM2LCe",
				"115zTGHKvFeFLPu3vF9Wx2gBqnxGnzvTpmkHPM2LCe",
			},
		},
	}

	request := CreateAuthorizationRequest(10, aud, "https://test.com/callback")

	request.WithZeroKnowledgeProofRequest(zkpProofRequest)

	assert.Equal(t, 2, len(request.Data.Scope))
}

func TestExtractData(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.KycBySignaturesCircuitID,
		CircuitData: &types.CircuitData{
			ID:              circuits.KycBySignaturesCircuitID,
			Description:     "test",
			VerificationKey: circuits.KycBySignaturesVerificationKey,
			Metadata:        circuits.KycBySignaturesPublicSignalsSchema,
		},
	}
	zkpProof.PubSignals = []string{
		"26592849444054787445766572449338308165040390141345377877344569181291872256",
		"12345",
		"164414642845063686862221124543185217840281790633605788367384240953047711744",
		"20826763141600863538041346956386832863527621891653741934199228821528372364336",
		"840",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"164414642845063686862221124543185217840281790633605788367384240953047711744",
		"20826763141600863538041346956386832863527621891653741934199228821528372364336",
		"2021",
		"4",
		"25",
		"18",
	}
	zkpProof.ProofData = &types.ProofData{
		A: []string{"15410252994758206156331933443865902387659457159831652500594192431349076893658",
			"20150829872771081060142254046116588090324284033366663360366174697329414878949",
			"1"},
		B: [][]string{{"9417153075860115376893693247142868897300054298656960914587138216866082643706",
			"10202816620941554744739718000741718724240818496129635422271960203010394413915",
		}, {"15503138617167966595249072003849677537923997283726290430496888985000900792650",
			"6173958614668002844023250887062625456639056306855696879145959593623787348506",
		}, {
			"1",
			"0",
		}},
		C: []string{
			"14084349531001200150970271267870661180690655641091539571582685666559667846160",
			"6506935406401708938070550600218341978561747347886649538986407400386963731317",
			"1",
		},
	}

	message.Data.Scope = []interface{}{zkpProof}
	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)

	assert.Equal(t, "26592849444054787445766572449338308165040390141345377877344569181291872256", token.Challenge)

}

func TestVerifyMessageWithAuthProof(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpProof := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpProof.ProofData = &types.ProofData{
		A: []string{
			"14577550064175748450987375704393907421920901508189337703397431390342898280710",
			"2281752636269477429337220624909079669171458815254340085790599145888707827099",
			"1",
		},
		B: [][]string{
			{
				"9892278221584481651733833641195128428650577799176543444926759323141284833312",
				"1103007638015861371033094865422242272258878990152036520161116288875574588192",
			},
			{
				"6922883339265533985243846004584074932233489016641091062635255509045633402568",
				"13255178914414615598816442349245796924909724461658223751280894796264625158328",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"11256651752290988174373131607181262214002388090610491351693173357538447781404",
			"17144378915804146123122006704789555643110248683444179479923585102094009244340",
			"1",
		},
	}
	zkpProof.PubSignals = []string{
		"1",
		"15383795261052586569047113011994713909892315748410703061728793744343300034754",
		"293373448908678327289599234275657468666604586273320428510206058753616052224",
	}
	message.Data.Scope = []interface{}{zkpProof}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "15383795261052586569047113011994713909892315748410703061728793744343300034754", token.State)
	assert.Equal(t, "11B34yHEY4tbE57kGKKFCHezo7rUBgouajFHeNszQm", token.ID)

	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0x035C4DBC897D203483D942696CE1dF5a9f933FcC")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

}

func TestVerifyMessageWithAuthAndAtomicProofMTP(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpAuth := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpAuth.ProofData = &types.ProofData{
		A: []string{
			"14577550064175748450987375704393907421920901508189337703397431390342898280710",
			"2281752636269477429337220624909079669171458815254340085790599145888707827099",
			"1",
		},
		B: [][]string{
			{
				"9892278221584481651733833641195128428650577799176543444926759323141284833312",
				"1103007638015861371033094865422242272258878990152036520161116288875574588192",
			},
			{
				"6922883339265533985243846004584074932233489016641091062635255509045633402568",
				"13255178914414615598816442349245796924909724461658223751280894796264625158328",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"11256651752290988174373131607181262214002388090610491351693173357538447781404",
			"17144378915804146123122006704789555643110248683444179479923585102094009244340",
			"1",
		},
	}
	zkpAuth.PubSignals = []string{
		"1",
		"15383795261052586569047113011994713909892315748410703061728793744343300034754",
		"293373448908678327289599234275657468666604586273320428510206058753616052224",
	}

	zkpAtomic := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AtomicQueryMTPCircuitID,
	}

	zkpAtomic.ProofData = &types.ProofData{
		A: []string{
			"5506321668056084995566756316563979609863466544082751774213294316102674533305",
			"14953767264429305477125818853906091103980645084989726684457750827776640676615",
			"1",
		},
		B: [][]string{
			{
				"19103650958780723801065944831191305079190180149691819542835496049446218906335",
				"17534560604355011413989526409647614012373537349457111791454431679858237109154",
			},
			{
				"9712667359455971127402748549074157460976344610250847735225630538121711047326",
				"4322002797459735322294492009938604808948489079408641006763891377854475025088",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"20688703552741093143493958140412714572788333103476633787069997722117141261405",
			"18592642862090383976775514461741843322144971271040124751702366261452885879263",
			"1",
		},
	}
	zkpAtomic.PubSignals = []string{
		"293373448908678327289599234275657468666604586273320428510206058753616052224",
		"15383795261052586569047113011994713909892315748410703061728793744343300034754",
		"1",
		"274380136414749538182079640726762994055",
		"3465800424177143196107127845857728750770736366457056414231195686681735039800",
		"238622032992029818959027522035982899478798944063520057730894779896578244608",
		"2",
		"10",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"1642074362",
	}
	message.Data.Scope = []interface{}{zkpAuth, zkpAtomic}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "15383795261052586569047113011994713909892315748410703061728793744343300034754", token.State)
	assert.Equal(t, "11B34yHEY4tbE57kGKKFCHezo7rUBgouajFHeNszQm", token.ID)
	//
	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0x035C4DBC897D203483D942696CE1dF5a9f933FcC")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

}
func TestVerifyMessageWithAuthAndAtomicProofSig(t *testing.T) {

	var message types.AuthorizationMessageResponse
	message.Type = AuthorizationResponseMessageType
	message.Data = types.AuthorizationMessageResponseData{}

	zkpAuth := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AuthCircuitID,
	}

	zkpAuth.ProofData = &types.ProofData{
		A: []string{
			"14577550064175748450987375704393907421920901508189337703397431390342898280710",
			"2281752636269477429337220624909079669171458815254340085790599145888707827099",
			"1",
		},
		B: [][]string{
			{
				"9892278221584481651733833641195128428650577799176543444926759323141284833312",
				"1103007638015861371033094865422242272258878990152036520161116288875574588192",
			},
			{
				"6922883339265533985243846004584074932233489016641091062635255509045633402568",
				"13255178914414615598816442349245796924909724461658223751280894796264625158328",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"11256651752290988174373131607181262214002388090610491351693173357538447781404",
			"17144378915804146123122006704789555643110248683444179479923585102094009244340",
			"1",
		},
	}
	zkpAuth.PubSignals = []string{
		"1",
		"15383795261052586569047113011994713909892315748410703061728793744343300034754",
		"293373448908678327289599234275657468666604586273320428510206058753616052224",
	}

	zkpAtomic := types.ZeroKnowledgeProof{
		Type:      types.ZeroKnowledgeProofType,
		CircuitID: circuits.AtomicQuerySigCircuitID,
	}

	zkpAtomic.ProofData = &types.ProofData{
		A: []string{
			"12465280670657365433226224865892529503207144574637894382962625493757619787626",
			"15012207483558904264831416397131118851104733604705425903485749683243428936592",
			"1",
		},
		B: [][]string{
			{
				"412439141377866952477454598567421950746655843813188995168944029814518872322",
				"20374285325125505729620771508216643263107098565427696359959945753828046881044",
			},
			{
				"159502947195186816187264391919796562797634494575152224596662561523049770296",
				"6579733386760647990935012601251534427203050677950319412886163814171698063944",
			},
			{
				"1",
				"0",
			}},
		C: []string{
			"5043807054708372330667044611751061592100238827693737126158931668103103940552",
			"2575070150656991149720237647769246226682466751291936304769200529372393624695",
			"1",
		},
	}
	zkpAtomic.PubSignals = []string{
		"293373448908678327289599234275657468666604586273320428510206058753616052224",
		"15383795261052586569047113011994713909892315748410703061728793744343300034754",
		"1",
		"274380136414749538182079640726762994055",
		"238622032992029818959027522035982899478798944063520057730894779896578244608",
		"17696575440410541956651452069150743140855295736867783485086107762348968115816",
		"2",
		"10",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"1642074362",
	}
	message.Data.Scope = []interface{}{zkpAuth, zkpAtomic}

	err := VerifyProofs(&message)
	assert.Nil(t, err)

	token, err := ExtractMetadata(&message)
	assert.Nil(t, err)
	assert.Equal(t, "15383795261052586569047113011994713909892315748410703061728793744343300034754", token.State)
	assert.Equal(t, "11B34yHEY4tbE57kGKKFCHezo7rUBgouajFHeNszQm", token.ID)
	//
	state, err := token.VerifyState(context.Background(), os.Getenv("RPC_URL"), "0x035C4DBC897D203483D942696CE1dF5a9f933FcC")
	assert.Nil(t, err)
	assert.Equal(t, true, state.Latest)

}
