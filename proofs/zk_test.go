package proofs

import (
	"github.com/iden3/go-circuits"
	"github.com/iden3/go-rapidsnark/types"
	"github.com/iden3/iden3comm/protocol"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func TestVerifyProof(t *testing.T) {

	var err error
	proofMessage := protocol.ZeroKnowledgeProofResponse{ZKProof: types.ZKProof{
		Proof: &types.ProofData{
			A: []string{
				"20973485107186613835294420504168844900060429745180277370078136645423323796988",
				"20876512355517454358387352357430469269532511208427702435640954212414846794988",
				"1",
			},
			B: [][]string{
				{
					"15359787792291301524429511563163819833209670586891499149880103897821631812320",
					"952148097741318750401406678248864482408113418728045541853254838790211944557",
				},
				{
					"3866547068988378419787216494850441937393748849859411619995030091666678234233",
					"12737260954983772047680437941193675886215315463965099527215354428856166589220",
				},
				{
					"1",
					"0",
				}},
			C: []string{
				"14032051669376519932957072147382739134658885782661390170658631107795386034990",
				"3426651920168576141328466441385872894824417141788260830832563707950605034542",
				"1",
			},
			Protocol: "groth16",
		},
		PubSignals: []string{
			"227999792560601581143923121210388382198276828932112237742319153709274234880",
			"10099789665300975457802178862296098271243359660315802759495016285352640212814",
			"12345",
			"8390795654739203972616926774091445498451520813142121365678565136228528725312",
			"206811791431269707427589302274952473147879888022142096363950465656014110720",
			"1653057062",
			"106590880073303418818490710639556704462",
			"2",
			"4",
			"840",
			"120",
			"340",
			"509",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
		},
	}}
	proofMessage.CircuitID = string(circuits.AtomicQueryMTPCircuitID)

	verificationKey, err := os.ReadFile("../testdata/mtpVerificationKey.json")
	assert.NoError(t, err)

	proofMessage.ID = 1

	err = VerifyProof(proofMessage, verificationKey)
	assert.Nil(t, err)
}
