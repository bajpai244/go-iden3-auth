package proofs

import (
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-rapidsnark/types"
	"github.com/iden3/iden3comm/protocol"
	"github.com/stretchr/testify/assert"
)

func TestVerifyProof(t *testing.T) {

	var err error
	proofMessage := protocol.ZeroKnowledgeProofResponse{ZKProof: types.ZKProof{
		Proof: &types.ProofData{
			A: []string{
				"17300412240859444515392568163435804813017976692285923296472945635331932727680",
				"7987339170212675259821816067019157877322619530773523635442853691144276581175",
				"1",
			},
			B: [][]string{
				{
					"5486219459376127769845397505363323827097781846702616106528032766863904141460",
					"11039278958960874345161114839879155843571258672217556129876164981000000213181",
				},
				{
					"5734177967798447984375578254489289977886713350854096962368592857583115164274",
					"21771665105082077940581255424279921654694357633832951123887813648180657619621",
				},
				{
					"1",
					"0",
				}},
			C: []string{
				"4106769399781383134298643763906436588385207522345794758381044448953462017859",
				"1234974648670414565564350118653247493464081700953044140002324628423327393314",
				"1",
			},
			Protocol: "groth16",
		},
		PubSignals: []string{
			"26599593799728934680860584327714016459626247438431721735682191132926148608",
			"4418769696461428246512928789643504202311642636963003365499223889989622854438",
			"12345",
			"16446163964048470129035485707706889290749894786011731450838224817103550600055",
			"77831441471838426779291891106433475666842073117835485972167846259714555904",
			"1653653936",
			"106590880073303418818490710639556704462",
			"2",
			"5",
			"840",
			"120",
			"340",
			"509",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
		},
	}}
	proofMessage.CircuitID = string(circuits.AtomicQueryMTPCircuitID)

	verificationKey, err := os.ReadFile("../testdata/credentialAtomicQueryMTP.json")
	assert.NoError(t, err)

	proofMessage.ID = 1

	err = VerifyProof(proofMessage, verificationKey)
	assert.Nil(t, err)
}
