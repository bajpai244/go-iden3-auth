package proofs

import (
	"os"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-rapidsnark/types"
	"github.com/iden3/iden3comm/protocol"
	"github.com/stretchr/testify/assert"
)

func TestVerifyProof(t *testing.T) {

	var err error
	proofMessage := protocol.ZeroKnowledgeProofResponse{ZKProof: types.ZKProof{
		Proof: &types.ProofData{
			A: []string{
				"13391792855876064159961972635593293420107384528568051553464431930751949164223",
				"1340234156514424371412608292854628119646495446034903157290847790338828365967",
				"1",
			},
			B: [][]string{
				{
					"15691819979475232094559173077222615349107673259729880872754546424435804210780",
					"5096136697484789888414648180385423591377893199387718567394854201118306816266",
				},
				{
					"14415469551251600097134734841213894130439560682036739798548029076915189571196",
					"20090000223414166057341085632483118175324868197522334211992129524912673014962",
				},
				{
					"1",
					"0",
				}},
			C: []string{
				"11415503132297310226070909779026062469592946937699661170150988764296705860650",
				"10455420445628565470154609245999512669023398128793538476867561521321358405677",
				"1",
			},
			Protocol: "groth16",
		},
		PubSignals: []string{
			"379949150130214723420589610911161895495647789006649785264738141299135414272",
			"18656147546666944484453899241916469544090258810192803949522794490493271005313",
			"1",
			"17339270624307006522829587570402128825147845744601780689258033623056405933706",
			"26599707002460144379092755370384635496563807452878989192352627271768342528",
			"17339270624307006522829587570402128825147845744601780689258033623056405933706",
			"1642074362",
			"106590880073303418818490710639556704462",
			"2",
			"5",
			"840",
			"120",
			"340",
			"509",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
			"0",
		},
	}}
	proofMessage.CircuitID = string(circuits.AtomicQueryMTPCircuitID)

	verificationKey, err := os.ReadFile("../testdata/credentialAtomicQueryMTP.json")
	assert.NoError(t, err)

	proofMessage.ID = 1

	err = VerifyProof(proofMessage, verificationKey)
	assert.Nil(t, err)
}
