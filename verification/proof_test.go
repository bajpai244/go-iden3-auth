package verification

import (
	"github.com/iden3/go-circom-prover-verifier/parsers"
	"github.com/iden3/go-circom-prover-verifier/verifier"
	"github.com/iden3/go-circuits"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestVerify(t *testing.T) {
	// verifyGroth16 the proofs
	vkJSON := []byte(circuits.AuthenticationVerificationKey)

	publicJSON := []byte(`["1","15383795261052586569047113011994713909892315748410703061728793744343300034754","293373448908678327289599234275657468666604586273320428510206058753616052224"]`)

	p := `{"pi_a":["14577550064175748450987375704393907421920901508189337703397431390342898280710","2281752636269477429337220624909079669171458815254340085790599145888707827099","1"],"pi_b":[["9892278221584481651733833641195128428650577799176543444926759323141284833312","1103007638015861371033094865422242272258878990152036520161116288875574588192"],["6922883339265533985243846004584074932233489016641091062635255509045633402568","13255178914414615598816442349245796924909724461658223751280894796264625158328"],["1","0"]],"pi_c":["11256651752290988174373131607181262214002388090610491351693173357538447781404","17144378915804146123122006704789555643110248683444179479923585102094009244340","1"],"protocol":"groth16","curve":"bn128"}`

	proof, err := parsers.ParseProof([]byte(p))
	require.Nil(t, err)

	public, err := parsers.ParsePublicSignals(publicJSON)

	require.Nil(t, err)
	vk, err := parsers.ParseVk(vkJSON)
	require.Nil(t, err)

	res := verifier.Verify(vk, proof, public)
	assert.True(t, res)
}
