package verification

import (
	"encoding/json"
	"testing"

	"github.com/iden3/go-circuits"
	"github.com/iden3/go-iden3-auth/types"
	"github.com/stretchr/testify/assert"
)

func TestVerify(t *testing.T) {
	// verifyGroth16 the proofs
	vkJSON, err := circuits.GetVerificationKey(circuits.AuthCircuitID)
	assert.NoError(t, err)

	publicJSON := []string{"1",
		"18656147546666944484453899241916469544090258810192803949522794490493271005313",
		"379949150130214723420589610911161895495647789006649785264738141299135414272"}
	p := `{
        "pi_a": [
         "6807142976568489254129987481389970790048870221943660648833750801722749769662",
         "13811182779758948993435669124001052501939669904238445458453308627013829993881",
         "1"
        ],
        "pi_b": [
         [
          "1100658387420856656999617260396587549490320987275888589013664343574809180330",
          "6271619554100652532302412650545865559102683218896584596952129504406572338279"
         ],
         [
          "14732910796480272245291363689840710264816417845998668210234805961967222411399",
          "697511497805383174761860295477525070010524578030535203059896030784240207952"
         ],
         [
          "1",
          "0"
         ]
        ],
        "pi_c": [
         "3322888400314063147927477851922827359406772099015587732727269650428166130415",
         "11791447421105500417246293414158106577578665220990150855390594651727173683574",
         "1"
        ],
        "protocol": "groth16",
        "curve": "bn128"
    }`

	var pd types.ProofData
	err = json.Unmarshal([]byte(p), &pd)
	assert.NoError(t, err)

	err = VerifyProof(pd, publicJSON, vkJSON)
	assert.NoError(t, err)
}
