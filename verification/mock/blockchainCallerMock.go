// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iden3/go-iden3-auth/verification (interfaces: BlockchainCaller)

// Package mock_verification is a generated GoMock package.
package mock_verification

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockchainCaller is a mock of BlockchainCaller interface.
type MockBlockchainCaller struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainCallerMockRecorder
}

// MockBlockchainCallerMockRecorder is the mock recorder for MockBlockchainCaller.
type MockBlockchainCallerMockRecorder struct {
	mock *MockBlockchainCaller
}

// NewMockBlockchainCaller creates a new mock instance.
func NewMockBlockchainCaller(ctrl *gomock.Controller) *MockBlockchainCaller {
	mock := &MockBlockchainCaller{ctrl: ctrl}
	mock.recorder = &MockBlockchainCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchainCaller) EXPECT() *MockBlockchainCallerMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockBlockchainCaller) CallContract(arg0 context.Context, arg1 ethereum.CallMsg, arg2 *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockBlockchainCallerMockRecorder) CallContract(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockBlockchainCaller)(nil).CallContract), arg0, arg1, arg2)
}
